import Handler.TextMessage (addTextMessageRecipients, addReplyTextMessageRecipient);
entity TextMessage {
    instance of Restricted, Deletable, Versioned, HasInsertInfo;
    text Text;
    phone Maybe Text;
    senderClientId Maybe ClientId;
    replyToTextMessageId Maybe TextMessageId;
    queued Maybe UTCTime;
    sent Maybe UTCTime;
    aborted Maybe UTCTime;
}
entity TextMessageRecipient {
    textMessageId TextMessageId;
    clientId ClientId;
    accepted Maybe UTCTime;
    sent Maybe UTCTime;
    delivered Maybe UTCTime;
}
route /incomingtextmessages {
    post {
        tId <- insert TextMessage from {
            insertionTime = now(),
            insertedByUserId = $auth.id,
            phone = $request.phone,
            text = $request.text
        };
        insert UserGroupContent from {
            userGroupId = $auth.defaultUserGroupId,
            textMessageContentId = tId
        };
        return {
            'id' = tId
        };
    }
}

route /textmessages {
    get {
        select t.id, t.*, c.firstName, c.lastName, rt.text as replyToText
            from TextMessage as t
            left outer join Client as c on c.id = t.senderClientId
            left outer join TextMessage as rt on rt.id = t.replyToTextMessageId

            where hasReadPerm $auth.id t.id
            order by t.insertionTime desc;
        if param "query" = $$ then
            where t.text ilike "%" || $$ || "%";    
        default-filter-sort;    
    }
    post {
        tId <- insert TextMessage from {
            insertionTime = now(),
            insertedByUserId = $auth.id,
            text = $request.text
        };
        addTextMessageRecipients $auth.id tId;
        insert UserGroupContent from {
            userGroupId = $auth.defaultUserGroupId,
            textMessageContentId = tId
        };
        return {
            'id' = tId
        };

    }

}
route /textmessages/#TextMessageId {
    get {
        select t.id, t.*, c.firstName, c.lastName from TextMessage as t
            left outer join Client as c on c.id = t.senderClientId
            where hasReadPerm $auth.id t.id
            and t.id = $1;
    }
    put {
        require TextMessage as t where t.id = $1
            and hasWritePerm $auth.id t.id
            and t.queued is Nothing
            and t.senderClientId is Nothing;
        versionId <- insert Version from {
            time = now(),
            userId = $auth.id
        };
        t <- get TextMessage identified by $1;
        insert TextMessage from t {
            activeId = $1,
            activeEndTime = now(),
            deletedVersionId = versionId
        };
        update TextMessage identified by $1 with {
            text = $request.text
        };
    }
    delete {
        require TextMessage as t where t.id = $1
            and hasWritePerm $auth.id t.id
            and (t.queued is Nothing or not t.aborted is Nothing)
            and t.deletedVersionId is Nothing;
        versionId <- insert Version from {
            time = now(),
            userId = $auth.id
        };
        update TextMessage identified by $1 with {
            deletedVersionId = versionId
        };
    }

}
route /textmessages/#TextMessageId/reply {
    post {
        require TextMessage as t where t.id = $1
            and hasWritePerm $auth.id t.id
            and not (t.phone is Nothing);
        tId <- insert TextMessage from {
                insertionTime = now(),
                insertedByUserId = $auth.id,
                text = "",
                replyToTextMessageId = $1
            };
        addReplyTextMessageRecipient tId $1;    
        insert UserGroupContent from {
            userGroupId = $auth.defaultUserGroupId,
            textMessageContentId = tId
        };
        return {
            'id' = tId
        };


    }
}

route /textmessages/#TextMessageId/queue {
    post {
        require TextMessage as t where t.id = $1
            and hasWritePerm $auth.id t.id
            and t.queued is Nothing
            and t.phone is Nothing;
        update TextMessage identified by $1 with {
            queued = now()
        };
    }
}

route /textmessages/#TextMessageId/abort {
    post {
        require TextMessage as t where t.id = $1
            and hasWritePerm $auth.id t.id
            and not (t.queued is Nothing)
            and t.aborted is Nothing;
        update TextMessage identified by $1 with {
            aborted = now()
        };
    }
}
route /textmessagerecipients {
    get {
        select tr.id, tr.*,
               c.firstName, c.lastName, c.phone
        from TextMessageRecipient as tr
        inner join Client as c on c.id = tr.clientId
        where hasReadPerm $auth.id tr.textMessageId
            and hasReadPerm $auth.id c.id;
        default-filter-sort;
        if param "query" = $$ then
            where c.firstName ilike "%" || $$ || "%"
                or c.lastName ilike "%" || $$ || "%"
                or c.phone ilike "%" || $$ || "%";
    }
}
route /textmessagerecipientsqueue {
    get {
        select tr.id, c.phone, tm.text
            from TextMessageRecipient as tr
            inner join Client as c on c.id = tr.clientId
            inner join TextMessage as tm on tm.id = tr.textMessageId
            where hasReadPerm $auth.id tm.id
                and hasReadPerm $auth.id c.id
                and tr.accepted is Nothing
                and not (tm.queued is Nothing)
                and tm.aborted is Nothing
                and tm.deletedVersionId is Nothing
                and c.deletedVersionId is Nothing
                and c.allowSms = True
                order by c.lastName asc, c.firstName asc
                limit 10;
    }
}
route /textmessagerecipients/#TextMessageRecipientId/accept {
    post {
        require TextMessageRecipient as tr 
            inner join TextMessage as tm on tm.id = tr.textMessageId 
            inner join Client as c on c.id = tr.clientId
            where tr.id = $1
            and not (tm.queued is Nothing)
            and tm.aborted is Nothing
            and hasWritePerm $auth.id tr.textMessageId
            and c.allowSms = True
            and tr.accepted is Nothing;
        update TextMessageRecipient identified by $1 with {
            accepted = now()
        };
    }
}
route /textmessagerecipients/#TextMessageRecipientId/sent {
    post {
        require TextMessageRecipient as tr where tr.id = $1
            and hasWritePerm $auth.id tr.textMessageId
            and tr.sent is Nothing
            and not (tr.accepted is Nothing);
        update TextMessageRecipient identified by $1 with {
            sent = now()
        };
    }
}
route /textmessagerecipients/#TextMessageRecipientId/fail {
    post {
        require TextMessageRecipient as tr where tr.id = $1
            and hasWritePerm $auth.id tr.textMessageId
            and tr.sent is Nothing
            and not (tr.accepted is Nothing);
        update TextMessageRecipient identified by $1 with {
            accepted = Nothing
        };
    }
}
route /textmessagerecipients/#TextMessageRecipientId/delivered {
    post {
        require TextMessageRecipient as tr where tr.id = $1
            and hasWritePerm $auth.id tr.textMessageId
            and not (tr.sent is Nothing)
            and not (tr.accepted is Nothing)
            and tr.delivered is Nothing;
        update TextMessageRecipient identified by $1 with {
            delivered = now()
        };
    }
}

